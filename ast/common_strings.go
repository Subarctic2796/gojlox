// Code generated by "stringer -type=FnType,ControlType -output=common_strings.go"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[FN_NONE-0]
	_ = x[FN_NATIVE-1]
	_ = x[FN_LAMBDA-2]
	_ = x[FN_FUNC-3]
	_ = x[FN_INIT-4]
	_ = x[FN_METHOD-5]
	_ = x[FN_STATIC-6]
}

const _FnType_name = "FN_NONEFN_NATIVEFN_LAMBDAFN_FUNCFN_INITFN_METHODFN_STATIC"

var _FnType_index = [...]uint8{0, 7, 16, 25, 32, 39, 48, 57}

func (i FnType) String() string {
	if i < 0 || i >= FnType(len(_FnType_index)-1) {
		return "FnType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _FnType_name[_FnType_index[i]:_FnType_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[CNTRL_NONE-0]
	_ = x[CNTRL_BREAK-1]
	_ = x[CNTRL_RETURN-2]
}

const _ControlType_name = "CNTRL_NONECNTRL_BREAKCNTRL_RETURN"

var _ControlType_index = [...]uint8{0, 10, 21, 33}

func (i ControlType) String() string {
	if i < 0 || i >= ControlType(len(_ControlType_index)-1) {
		return "ControlType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _ControlType_name[_ControlType_index[i]:_ControlType_index[i+1]]
}
